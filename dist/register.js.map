{"version":3,"sources":["webpack:///./components/Register/index.jsx"],"names":["Register","render"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;;AACA;AACA;AACA;AACA;;AAEA;AACI;AACA;AACJ;AACA;;AAEA,MAAMA,QAAN,0BAAiC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,aAAS;AACL;AACA;AACA,eACI;AAAA;AAAA;AAAA;AAAA,SADJ;AAGH;AAzE4B;;kBA4ElBD,Q","file":"register.js","sourcesContent":["import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import TextField from 'material-ui/TextField';\r\n// import RaisedButton from 'material-ui/RaisedButton';\r\n// import faker from 'faker';\r\n\r\n// import {\r\n    // mapToProps as sessionMapToProps,\r\n    // dispatchActions as sessionActions\r\n// } from '../store/config/session/selectors';\r\n// import socket from '../../services/socket/client';\r\n\r\nclass Register extends Component {\r\n    // TODO set propTypes and tests - break into smaller parts\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.socket = socket;\r\n    //     this.state = {\r\n    //         form: [\r\n    //             {\r\n    //                 label: '',\r\n    //                 type: 'text',\r\n    //                 name: 'nickname',\r\n    //                 value: '',\r\n    //                 validate: function () {\r\n    //                     return this.value.length;\r\n    //                 },\r\n    //                 errorText: '',\r\n    //                 onChange: this.onChange.bind(this)\r\n    //\r\n    //             }\r\n    //         ]\r\n    //     };\r\n    //\r\n    //     this.onRegister = this.onRegister.bind(this);\r\n    // }\r\n    //\r\n    // onChange(event) {\r\n    //     const { target } = event;\r\n    //     const { name, value } = target;\r\n    //     this.setState(prevState => {\r\n    //         return {\r\n    //             form: prevState.form.map(field => {\r\n    //                 if (field.name === name) {\r\n    //                     field.value = value;\r\n    //                 }\r\n    //                 return field;\r\n    //             })\r\n    //         };\r\n    //     });\r\n    // }\r\n    //\r\n    // onRegister(event) {\r\n    //     event.preventDefault();\r\n    //     const { actions, history } = this.props;\r\n    //     const { session } = actions;\r\n    //     const { setSession } = session;\r\n    //     const { form } = this.state;\r\n    //     const nickname = form[0].value;\r\n    //     const avatar = faker.image.avatar();\r\n    //     const newSession = { nickname, avatar };\r\n    //     this.socket.emit('newUser', newSession, (err) => {\r\n    //         if (!err) {\r\n    //             setSession(newSession);\r\n    //             history.push('/chat');\r\n    //         } else {\r\n    //             this.setState(prevState => {\r\n    //                 return {\r\n    //                     form: prevState.form.map(field => {\r\n    //                         field.errorText = err; // eslint-disable-line no-param-reassign\r\n    //                         field.value = ''; // eslint-disable-line no-param-reassign\r\n    //                         return field;\r\n    //                     })\r\n    //                 }\r\n    //             });\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    render() {\r\n        // const { form } = this.state;\r\n        // const hasName = form[0].value;\r\n        return (\r\n            <div>registers</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Register;\r\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./components/Register/index.jsx"],"names":["Register","render"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;;AACA;AACA;AACA;AACA;;AAEA;AACI;AACA;AACJ;AACA;;AAEA,MAAMA,QAAN,0BAAiC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,aAAS;AACL;AACA;AACA,eACI;AAAA;AAAA;AAAA;AAAA,SADJ;AAGH;AAzE4B;;kBA4ElBD,Q","file":"register.js","sourcesContent":["import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n// import TextField from 'material-ui/TextField';\n// import RaisedButton from 'material-ui/RaisedButton';\n// import faker from 'faker';\n\n// import {\n    // mapToProps as sessionMapToProps,\n    // dispatchActions as sessionActions\n// } from '../store/config/session/selectors';\n// import socket from '../../services/socket/client';\n\nclass Register extends Component {\n    // TODO set propTypes and tests - break into smaller parts\n    // constructor(props) {\n    //     super(props);\n    //     this.socket = socket;\n    //     this.state = {\n    //         form: [\n    //             {\n    //                 label: '',\n    //                 type: 'text',\n    //                 name: 'nickname',\n    //                 value: '',\n    //                 validate: function () {\n    //                     return this.value.length;\n    //                 },\n    //                 errorText: '',\n    //                 onChange: this.onChange.bind(this)\n    //\n    //             }\n    //         ]\n    //     };\n    //\n    //     this.onRegister = this.onRegister.bind(this);\n    // }\n    //\n    // onChange(event) {\n    //     const { target } = event;\n    //     const { name, value } = target;\n    //     this.setState(prevState => {\n    //         return {\n    //             form: prevState.form.map(field => {\n    //                 if (field.name === name) {\n    //                     field.value = value;\n    //                 }\n    //                 return field;\n    //             })\n    //         };\n    //     });\n    // }\n    //\n    // onRegister(event) {\n    //     event.preventDefault();\n    //     const { actions, history } = this.props;\n    //     const { session } = actions;\n    //     const { setSession } = session;\n    //     const { form } = this.state;\n    //     const nickname = form[0].value;\n    //     const avatar = faker.image.avatar();\n    //     const newSession = { nickname, avatar };\n    //     this.socket.emit('newUser', newSession, (err) => {\n    //         if (!err) {\n    //             setSession(newSession);\n    //             history.push('/chat');\n    //         } else {\n    //             this.setState(prevState => {\n    //                 return {\n    //                     form: prevState.form.map(field => {\n    //                         field.errorText = err; // eslint-disable-line no-param-reassign\n    //                         field.value = ''; // eslint-disable-line no-param-reassign\n    //                         return field;\n    //                     })\n    //                 }\n    //             });\n    //         }\n    //     });\n    // }\n\n    render() {\n        // const { form } = this.state;\n        // const hasName = form[0].value;\n        return (\n            <div>registers</div>\n        );\n    }\n}\n\nexport default Register;\n"],"sourceRoot":""}